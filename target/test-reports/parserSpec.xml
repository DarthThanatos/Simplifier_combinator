<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="Vobis-Komputer" name="parserSpec" tests="19" errors="0" failures="15" time="-0.019">
                <properties> <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="C:\Program Files\Java\jdk1.8.0_72\jre\bin"/><property name="java.vm.version" value="25.72-b15"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=";"/><property name="java.vm.name" value="Java HotSpot(TM) 64-Bit Server VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="PL"/><property name="user.script" value=""/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value="Service Pack 1"/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="C:\Users\Vobis\Desktop\workspace\Simplifier_combinator"/><property name="java.runtime.version" value="1.8.0_72-b15"/><property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/><property name="java.endorsed.dirs" value="C:\Program Files\Java\jdk1.8.0_72\jre\lib\endorsed"/><property name="os.arch" value="amd64"/><property name="java.io.tmpdir" value="C:\Users\Vobis\AppData\Local\Temp\"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="user.variant" value=""/><property name="os.name" value="Windows 7"/><property name="sun.jnu.encoding" value="Cp1250"/><property name="java.library.path" value="C:\Program Files\Java\jdk1.8.0_72\bin;C:\windows\Sun\Java\bin;C:\windows\system32;C:\windows;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files\Common Files\Microsoft Shared\Windows Live;C:\Program Files (x86)\Common Files\Microsoft Shared\Windows Live;C:\windows\system32;C:\windows;C:\windows\System32\Wbem;C:\windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\Internet Explorer;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;C:\Program Files\Java\jdk1.8.0_72\bin;C:\Program Files\Java\jdk1.7.0_75\bin;C:\Users\Vobis\Desktop\Apache ant\apache-ant-1.9.4\bin;C:\Program Files (x86)\SMLNJ\bin\;C:\Program Files (x86)\sbt\\bin;C:\Program Files (x86)\sbt\bin;C:\Program Files (x86)\scala\bin;C:\Program Files\Git\cmd;C:\Users\Vobis\Desktop\ROBERT\8086\asmy\BIN;;C:\mStatica 3;."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/><property name="os.version" value="6.1"/><property name="user.home" value="C:\Users\Vobis"/><property name="user.timezone" value="Europe/Belgrade"/><property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/><property name="file.encoding" value="Cp1250"/><property name="java.specification.version" value="1.8"/><property name="sbt.log.format" value="true"/><property name="java.class.path" value="C:\Program Files (x86)\sbt\bin\sbt-launch.jar"/><property name="user.name" value="Vobis"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="xsbt.boot.Boot test"/><property name="java.home" value="C:\Program Files\Java\jdk1.8.0_72\jre"/><property name="sun.arch.data.model" value="64"/><property name="user.language" value="pl"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.awt.windows.WToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_72"/><property name="java.ext.dirs" value="C:\Program Files\Java\jdk1.8.0_72\jre\lib\ext;C:\windows\Sun\Java\lib\ext"/><property name="sun.boot.class.path" value="C:\Program Files\Java\jdk1.8.0_72\jre\lib\resources.jar;C:\Program Files\Java\jdk1.8.0_72\jre\lib\rt.jar;C:\Program Files\Java\jdk1.8.0_72\jre\lib\sunrsasign.jar;C:\Program Files\Java\jdk1.8.0_72\jre\lib\jsse.jar;C:\Program Files\Java\jdk1.8.0_72\jre\lib\jce.jar;C:\Program Files\Java\jdk1.8.0_72\jre\lib\charsets.jar;C:\Program Files\Java\jdk1.8.0_72\jre\lib\jfr.jar;C:\Program Files\Java\jdk1.8.0_72\jre\classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="sun.stderr.encoding" value="cp852"/><property name="file.separator" value="\"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="sun.cpu.endian" value="little"/><property name="sun.stdout.encoding" value="cp852"/><property name="sun.desktop" value="windows"/><property name="sun.cpu.isalist" value="amd64"/>
        </properties>
                <testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="Got the exception java.lang.IllegalArgumentException: FAILURE Could not parse 'x**y*x**z': `{' expected but `*' found" type="java.lang.Exception">java.lang.Exception: Got the exception java.lang.IllegalArgumentException: FAILURE Could not parse 'x**y*x**z': `{' expected but `*' found
	at parserSpec$$anonfun$2$$anonfun$apply$31.apply(Specs.scala:71)
	at parserSpec$$anonfun$2$$anonfun$apply$31.apply(Specs.scala:70)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(BinExpr(+,IntNum(2),BinExpr(*,IntNum(3),IntNum(5)))))))'

 is not equal to 

'NodeList(List(NodeList(List(IntNum(17)))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(BinExpr(+,IntNum(2),BinExpr(*,IntNum(3),IntNum(5)))))))'

 is not equal to 

'NodeList(List(NodeList(List(IntNum(17)))))'
	at parserSpec$$anonfun$2$$anonfun$apply$50.apply(Specs.scala:83)
	at parserSpec$$anonfun$2$$anonfun$apply$50.apply(Specs.scala:82)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(BinExpr(/,Variable(x),Variable(x))))))'

 is not equal to 

'NodeList(List(NodeList(List(IntNum(1)))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(BinExpr(/,Variable(x),Variable(x))))))'

 is not equal to 

'NodeList(List(NodeList(List(IntNum(1)))))'
	at parserSpec$$anonfun$2$$anonfun$apply$57.apply(Specs.scala:89)
	at parserSpec$$anonfun$2$$anonfun$apply$57.apply(Specs.scala:88)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(BinExpr(+,Variable(x),IntNum(0))))))'

 is not equal to 

'NodeList(List(NodeList(List(Variable(x)))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(BinExpr(+,Variable(x),IntNum(0))))))'

 is not equal to 

'NodeList(List(NodeList(List(Variable(x)))))'
	at parserSpec$$anonfun$2$$anonfun$apply$72.apply(Specs.scala:99)
	at parserSpec$$anonfun$2$$anonfun$apply$72.apply(Specs.scala:98)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(BinExpr(-,BinExpr(+,Variable(x),IntNum(5)),Variable(x))))))'

 is not equal to 

'NodeList(List(NodeList(List(IntNum(5)))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(BinExpr(-,BinExpr(+,Variable(x),IntNum(5)),Variable(x))))))'

 is not equal to 

'NodeList(List(NodeList(List(IntNum(5)))))'
	at parserSpec$$anonfun$2$$anonfun$apply$113.apply(Specs.scala:122)
	at parserSpec$$anonfun$2$$anonfun$apply$113.apply(Specs.scala:121)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(BinExpr(-,BinExpr(*,IntNum(2),Variable(x)),Variable(x))))))'

 is not equal to 

'NodeList(List(NodeList(List(Variable(x)))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(BinExpr(-,BinExpr(*,IntNum(2),Variable(x)),Variable(x))))))'

 is not equal to 

'NodeList(List(NodeList(List(Variable(x)))))'
	at parserSpec$$anonfun$2$$anonfun$apply$120.apply(Specs.scala:128)
	at parserSpec$$anonfun$2$$anonfun$apply$120.apply(Specs.scala:127)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(Unary(not,Unary(not,Unary(not,Variable(x))))))))'

 is not equal to 

'NodeList(List(NodeList(List(Unary(not,Variable(x))))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(Unary(not,Unary(not,Unary(not,Variable(x))))))))'

 is not equal to 

'NodeList(List(NodeList(List(Unary(not,Variable(x))))))'
	at parserSpec$$anonfun$2$$anonfun$apply$129.apply(Specs.scala:135)
	at parserSpec$$anonfun$2$$anonfun$apply$129.apply(Specs.scala:134)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(Unary(not,BinExpr(==,Variable(x),Variable(y)))))))'

 is not equal to 

'NodeList(List(NodeList(List(BinExpr(!=,Variable(x),Variable(y))))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(Unary(not,BinExpr(==,Variable(x),Variable(y)))))))'

 is not equal to 

'NodeList(List(NodeList(List(BinExpr(!=,Variable(x),Variable(y))))))'
	at parserSpec$$anonfun$2$$anonfun$apply$134.apply(Specs.scala:140)
	at parserSpec$$anonfun$2$$anonfun$apply$134.apply(Specs.scala:139)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(KeyDatumList(List(KeyDatum(StringConst(&quot;a&quot;),IntNum(1)), KeyDatum(StringConst(&quot;b&quot;),IntNum(2)), KeyDatum(StringConst(&quot;a&quot;),IntNum(3))))))))'

 is not equal to 

'NodeList(List(NodeList(List(KeyDatumList(List(KeyDatum(StringConst(&quot;a&quot;),IntNum(3)), KeyDatum(StringConst(&quot;b&quot;),IntNum(2))))))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(KeyDatumList(List(KeyDatum(StringConst(&quot;a&quot;),IntNum(1)), KeyDatum(StringConst(&quot;b&quot;),IntNum(2)), KeyDatum(StringConst(&quot;a&quot;),IntNum(3))))))))'

 is not equal to 

'NodeList(List(NodeList(List(KeyDatumList(List(KeyDatum(StringConst(&quot;a&quot;),IntNum(3)), KeyDatum(StringConst(&quot;b&quot;),IntNum(2))))))))'
	at parserSpec$$anonfun$2$$anonfun$apply$147.apply(Specs.scala:149)
	at parserSpec$$anonfun$2$$anonfun$apply$147.apply(Specs.scala:149)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(BinExpr(+,ElemList(List()),ElemList(List()))))))'

 is not equal to 

'NodeList(List(NodeList(List(ElemList(List())))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(BinExpr(+,ElemList(List()),ElemList(List()))))))'

 is not equal to 

'NodeList(List(NodeList(List(ElemList(List())))))'
	at parserSpec$$anonfun$2$$anonfun$apply$150.apply(Specs.scala:153)
	at parserSpec$$anonfun$2$$anonfun$apply$150.apply(Specs.scala:152)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(x))))))'

 is not equal to 

'NodeList(List())'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(x))))))'

 is not equal to 

'NodeList(List())'
	at parserSpec$$anonfun$2$$anonfun$apply$159.apply(Specs.scala:160)
	at parserSpec$$anonfun$2$$anonfun$apply$159.apply(Specs.scala:160)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(a)), Assignment(Variable(x),Variable(b))))))'

 is not equal to 

'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(b))))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(a)), Assignment(Variable(x),Variable(b))))))'

 is not equal to 

'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(b))))))'
	at parserSpec$$anonfun$2$$anonfun$apply$162.apply(Specs.scala:164)
	at parserSpec$$anonfun$2$$anonfun$apply$162.apply(Specs.scala:164)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(IfElifElse(TrueConst(),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(1)))))),ElIfList(List()),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(0)))))))))'

 is not equal to 

'NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(1))))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(IfElifElse(TrueConst(),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(1)))))),ElIfList(List()),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(0)))))))))'

 is not equal to 

'NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(1))))))'
	at parserSpec$$anonfun$2$$anonfun$apply$165.apply(Specs.scala:177)
	at parserSpec$$anonfun$2$$anonfun$apply$165.apply(Specs.scala:167)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(NodeList(List(Assignment(Variable(x),IfElseExpr(TrueConst(),Variable(y),Variable(z)))))))'

 is not equal to 

'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(y))))))'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(NodeList(List(Assignment(Variable(x),IfElseExpr(TrueConst(),Variable(y),Variable(z)))))))'

 is not equal to 

'NodeList(List(NodeList(List(Assignment(Variable(x),Variable(y))))))'
	at parserSpec$$anonfun$2$$anonfun$apply$170.apply(Specs.scala:183)
	at parserSpec$$anonfun$2$$anonfun$apply$170.apply(Specs.scala:181)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="'NodeList(List(WhileInstr(FalseConst(),NodeList(List(NodeList(List(Assignment(Variable(x),BinExpr(+,Variable(x),IntNum(1))))))))))'

 is not equal to 

'NodeList(List())'" type="java.lang.Exception">java.lang.Exception: 'NodeList(List(WhileInstr(FalseConst(),NodeList(List(NodeList(List(Assignment(Variable(x),BinExpr(+,Variable(x),IntNum(1))))))))))'

 is not equal to 

'NodeList(List())'
	at parserSpec$$anonfun$2$$anonfun$apply$175.apply(Specs.scala:193)
	at parserSpec$$anonfun$2$$anonfun$apply$175.apply(Specs.scala:187)
</failure>
                    </testcase>
                <system-out></system-out>
                <system-err></system-err>
                </testsuite>