<?xml version='1.0' encoding='UTF-8'?>
<testsuite hostname="Lenovo-PC" name="parserSpec" tests="19" errors="14" failures="1" time="-0.019">
                <properties> <property name="jline.esc.timeout" value="0"/><property name="java.runtime.name" value="Java(TM) SE Runtime Environment"/><property name="sun.boot.library.path" value="C:\Program Files (x86)\Java\jdk1.8.0_45\jre\bin"/><property name="java.vm.version" value="25.45-b02"/><property name="java.vm.vendor" value="Oracle Corporation"/><property name="java.vendor.url" value="http://java.oracle.com/"/><property name="path.separator" value=";"/><property name="java.vm.name" value="Java HotSpot(TM) Client VM"/><property name="file.encoding.pkg" value="sun.io"/><property name="user.country" value="PL"/><property name="user.script" value=""/><property name="sun.java.launcher" value="SUN_STANDARD"/><property name="sun.os.patch.level" value=""/><property name="java.vm.specification.name" value="Java Virtual Machine Specification"/><property name="user.dir" value="C:\Users\Robert\Desktop\Robert\agh\kompilatory\laby\zad5\simplifier_combinator"/><property name="java.runtime.version" value="1.8.0_45-b14"/><property name="java.awt.graphicsenv" value="sun.awt.Win32GraphicsEnvironment"/><property name="java.endorsed.dirs" value="C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\endorsed"/><property name="os.arch" value="x86"/><property name="java.io.tmpdir" value="C:\Users\Robert\AppData\Local\Temp\"/><property name="line.separator" value="
"/><property name="java.vm.specification.vendor" value="Oracle Corporation"/><property name="user.variant" value=""/><property name="os.name" value="Windows 8.1"/><property name="sun.jnu.encoding" value="Cp1250"/><property name="java.library.path" value="C:\Program Files (x86)\Java\jdk1.8.0_45\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;c:\tdm-gcc-32\bin;c:\tdm-gcc-32\libexec\gcc\i686-pc-mingw32\5.3.0;C:\ProgramData\Oracle\Java\javapath;C:\Program Files (x86)\Intel\TXE Components\TCS\;C:\Program Files\Intel\TXE Components\TCS\;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Common Files\lenovo\easyplussdk\bin;C:\Program Files (x86)\Java\jdk1.8.0_45\bin;C:\Program Files (x86)\SMLNJ\bin\;C:\Users\Robert\Desktop\Stuff\Apache ant\apache-ant-1.9.4\bin;C:\Users\Robert\Desktop\Stuff\apache-maven-3.0.5\bin;C:\Users\Robert\Desktop\Android\SDK\tools;C:\Users\Robert\Desktop\Android\SDK\platform-tools;C:\Users\Robert\Desktop\python;C:\Users\Robert\Desktop\python\Scripts;C:\Program Files (x86)\erl7.1\bin;C:\Program Files (x86)\scala\bin;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;c:\altera\90\quartus\bin;c:\altera\90\quartus\eda\sim_lib\excalibur\swift\lib\pcnt.lib;C:\Program Files (x86)\sbt\bin;C:\Program Files (x86)\sbt\\bin;C:\Program Files\Git\cmd;C:\Program Files (x86)\gnuplot\bin;C:\Users\Robert\Desktop\Sun\mq\lib;C:\Program Files\nodejs\;C:\Program Files (x86)\Statgraphics\STATGRAPHICS Centurion XVI.II\;C:\Program Files (x86)\Windows Live\Shared;C:\Program Files (x86)\MiKTeX 2.9\miktex\bin\;C:\masm32\bin;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\WINDOWS\SysWOW64\WindowsPowerShell\v1.0\Modules\TShell\TShell\;C:\Users\Robert\Desktop\Robert\agh\python;C:\Users\Robert\Desktop\Robert\agh\python\Scripts;C:\Program Files\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Users\Robert\AppData\Roaming\npm;."/><property name="java.specification.name" value="Java Platform API Specification"/><property name="java.class.version" value="52.0"/><property name="sun.management.compiler" value="HotSpot Client Compiler"/><property name="os.version" value="6.3"/><property name="user.home" value="C:\Users\Robert"/><property name="user.timezone" value="Europe/Belgrade"/><property name="java.awt.printerjob" value="sun.awt.windows.WPrinterJob"/><property name="file.encoding" value="Cp1250"/><property name="java.specification.version" value="1.8"/><property name="sbt.log.format" value="true"/><property name="java.class.path" value="C:\Program Files (x86)\sbt\bin\sbt-launch.jar"/><property name="user.name" value="Robert"/><property name="jline.shutdownhook" value="false"/><property name="java.vm.specification.version" value="1.8"/><property name="sun.java.command" value="xsbt.boot.Boot test"/><property name="java.home" value="C:\Program Files (x86)\Java\jdk1.8.0_45\jre"/><property name="sun.arch.data.model" value="32"/><property name="user.language" value="pl"/><property name="java.specification.vendor" value="Oracle Corporation"/><property name="awt.toolkit" value="sun.awt.windows.WToolkit"/><property name="java.vm.info" value="mixed mode"/><property name="java.version" value="1.8.0_45"/><property name="java.ext.dirs" value="C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\ext;C:\WINDOWS\Sun\Java\lib\ext"/><property name="sun.boot.class.path" value="C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\resources.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\rt.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\sunrsasign.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\jsse.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\jce.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\charsets.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\lib\jfr.jar;C:\Program Files (x86)\Java\jdk1.8.0_45\jre\classes"/><property name="java.vendor" value="Oracle Corporation"/><property name="sun.stderr.encoding" value="cp852"/><property name="file.separator" value="\"/><property name="java.vendor.url.bug" value="http://bugreport.sun.com/bugreport/"/><property name="sun.io.unicode.encoding" value="UnicodeLittle"/><property name="sun.cpu.endian" value="little"/><property name="sun.stdout.encoding" value="cp852"/><property name="sun.desktop" value="windows"/><property name="sun.cpu.isalist" value="pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86"/>
        </properties>
                <testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> 
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <failure message="Got the exception java.lang.IllegalArgumentException: FAILURE Could not parse 'x**y*x**z': `{' expected but `*' found" type="java.lang.Exception">java.lang.Exception: Got the exception java.lang.IllegalArgumentException: FAILURE Could not parse 'x**y*x**z': `{' expected but `*' found
	at parserSpec$$anonfun$2$$anonfun$apply$33.apply(Specs.scala:71)
	at parserSpec$$anonfun$2$$anonfun$apply$33.apply(Specs.scala:70)
</failure>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="BinExpr(+,IntNum(2),BinExpr(*,IntNum(3),IntNum(5))) (of class AST.BinExpr)" type="scala.MatchError">scala.MatchError: BinExpr(+,IntNum(2),BinExpr(*,IntNum(3),IntNum(5))) (of class AST.BinExpr)
	at simplifier.Simplifier$.simplify(simplifier.scala:13)
	at simplifier.Simplifier$.simplify(simplifier.scala:41)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$52$$anonfun$apply$53.apply(Specs.scala:83)
	at parserSpec$$anonfun$2$$anonfun$apply$52$$anonfun$apply$53.apply(Specs.scala:83)
	at parserSpec$$anonfun$2$$anonfun$apply$52.apply(Specs.scala:83)
	at parserSpec$$anonfun$2$$anonfun$apply$52.apply(Specs.scala:82)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="BinExpr(/,Variable(x),Variable(x)) (of class AST.BinExpr)" type="scala.MatchError">scala.MatchError: BinExpr(/,Variable(x),Variable(x)) (of class AST.BinExpr)
	at simplifier.Simplifier$.simplify(simplifier.scala:13)
	at simplifier.Simplifier$.simplify(simplifier.scala:41)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$59$$anonfun$apply$60.apply(Specs.scala:89)
	at parserSpec$$anonfun$2$$anonfun$apply$59$$anonfun$apply$60.apply(Specs.scala:89)
	at parserSpec$$anonfun$2$$anonfun$apply$59.apply(Specs.scala:89)
	at parserSpec$$anonfun$2$$anonfun$apply$59.apply(Specs.scala:88)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="BinExpr(+,Variable(x),IntNum(0)) (of class AST.BinExpr)" type="scala.MatchError">scala.MatchError: BinExpr(+,Variable(x),IntNum(0)) (of class AST.BinExpr)
	at simplifier.Simplifier$.simplify(simplifier.scala:13)
	at simplifier.Simplifier$.simplify(simplifier.scala:41)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$74$$anonfun$apply$75.apply(Specs.scala:99)
	at parserSpec$$anonfun$2$$anonfun$apply$74$$anonfun$apply$75.apply(Specs.scala:99)
	at parserSpec$$anonfun$2$$anonfun$apply$74.apply(Specs.scala:99)
	at parserSpec$$anonfun$2$$anonfun$apply$74.apply(Specs.scala:98)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="BinExpr(-,BinExpr(+,Variable(x),IntNum(5)),Variable(x)) (of class AST.BinExpr)" type="scala.MatchError">scala.MatchError: BinExpr(-,BinExpr(+,Variable(x),IntNum(5)),Variable(x)) (of class AST.BinExpr)
	at simplifier.Simplifier$.simplify(simplifier.scala:13)
	at simplifier.Simplifier$.simplify(simplifier.scala:41)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$115$$anonfun$apply$116.apply(Specs.scala:122)
	at parserSpec$$anonfun$2$$anonfun$apply$115$$anonfun$apply$116.apply(Specs.scala:122)
	at parserSpec$$anonfun$2$$anonfun$apply$115.apply(Specs.scala:122)
	at parserSpec$$anonfun$2$$anonfun$apply$115.apply(Specs.scala:121)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="BinExpr(-,BinExpr(*,IntNum(2),Variable(x)),Variable(x)) (of class AST.BinExpr)" type="scala.MatchError">scala.MatchError: BinExpr(-,BinExpr(*,IntNum(2),Variable(x)),Variable(x)) (of class AST.BinExpr)
	at simplifier.Simplifier$.simplify(simplifier.scala:13)
	at simplifier.Simplifier$.simplify(simplifier.scala:41)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$122$$anonfun$apply$123.apply(Specs.scala:128)
	at parserSpec$$anonfun$2$$anonfun$apply$122$$anonfun$apply$123.apply(Specs.scala:128)
	at parserSpec$$anonfun$2$$anonfun$apply$122.apply(Specs.scala:128)
	at parserSpec$$anonfun$2$$anonfun$apply$122.apply(Specs.scala:127)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="Unary(not,Unary(not,Unary(not,Variable(x)))) (of class AST.Unary)" type="scala.MatchError">scala.MatchError: Unary(not,Unary(not,Unary(not,Variable(x)))) (of class AST.Unary)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$131$$anonfun$apply$132.apply(Specs.scala:135)
	at parserSpec$$anonfun$2$$anonfun$apply$131$$anonfun$apply$132.apply(Specs.scala:135)
	at parserSpec$$anonfun$2$$anonfun$apply$131.apply(Specs.scala:135)
	at parserSpec$$anonfun$2$$anonfun$apply$131.apply(Specs.scala:134)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="Unary(not,BinExpr(==,Variable(x),Variable(y))) (of class AST.Unary)" type="scala.MatchError">scala.MatchError: Unary(not,BinExpr(==,Variable(x),Variable(y))) (of class AST.Unary)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$136$$anonfun$apply$137.apply(Specs.scala:140)
	at parserSpec$$anonfun$2$$anonfun$apply$136$$anonfun$apply$137.apply(Specs.scala:140)
	at parserSpec$$anonfun$2$$anonfun$apply$136.apply(Specs.scala:140)
	at parserSpec$$anonfun$2$$anonfun$apply$136.apply(Specs.scala:139)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="KeyDatumList(List(KeyDatum(StringConst(&quot;a&quot;),IntNum(1)), KeyDatum(StringConst(&quot;b&quot;),IntNum(2)), KeyDatum(StringConst(&quot;a&quot;),IntNum(3)))) (of class AST.KeyDatumList)" type="scala.MatchError">scala.MatchError: KeyDatumList(List(KeyDatum(StringConst(&quot;a&quot;),IntNum(1)), KeyDatum(StringConst(&quot;b&quot;),IntNum(2)), KeyDatum(StringConst(&quot;a&quot;),IntNum(3)))) (of class AST.KeyDatumList)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$149$$anonfun$apply$150.apply(Specs.scala:149)
	at parserSpec$$anonfun$2$$anonfun$apply$149$$anonfun$apply$150.apply(Specs.scala:149)
	at parserSpec$$anonfun$2$$anonfun$apply$149.apply(Specs.scala:149)
	at parserSpec$$anonfun$2$$anonfun$apply$149.apply(Specs.scala:149)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="BinExpr(+,ElemList(List()),ElemList(List())) (of class AST.BinExpr)" type="scala.MatchError">scala.MatchError: BinExpr(+,ElemList(List()),ElemList(List())) (of class AST.BinExpr)
	at simplifier.Simplifier$.simplify(simplifier.scala:13)
	at simplifier.Simplifier$.simplify(simplifier.scala:41)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$152$$anonfun$apply$153.apply(Specs.scala:153)
	at parserSpec$$anonfun$2$$anonfun$apply$152$$anonfun$apply$153.apply(Specs.scala:153)
	at parserSpec$$anonfun$2$$anonfun$apply$152.apply(Specs.scala:153)
	at parserSpec$$anonfun$2$$anonfun$apply$152.apply(Specs.scala:152)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="Assignment(Variable(x),Variable(x)) (of class AST.Assignment)" type="scala.MatchError">scala.MatchError: Assignment(Variable(x),Variable(x)) (of class AST.Assignment)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$161$$anonfun$apply$162.apply(Specs.scala:160)
	at parserSpec$$anonfun$2$$anonfun$apply$161$$anonfun$apply$162.apply(Specs.scala:160)
	at parserSpec$$anonfun$2$$anonfun$apply$161.apply(Specs.scala:160)
	at parserSpec$$anonfun$2$$anonfun$apply$161.apply(Specs.scala:160)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="Assignment(Variable(x),Variable(a)) (of class AST.Assignment)" type="scala.MatchError">scala.MatchError: Assignment(Variable(x),Variable(a)) (of class AST.Assignment)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$164$$anonfun$apply$165.apply(Specs.scala:164)
	at parserSpec$$anonfun$2$$anonfun$apply$164$$anonfun$apply$165.apply(Specs.scala:164)
	at parserSpec$$anonfun$2$$anonfun$apply$164.apply(Specs.scala:164)
	at parserSpec$$anonfun$2$$anonfun$apply$164.apply(Specs.scala:164)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="IfElifElse(TrueConst(),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(1)))))),ElIfList(List()),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(0))))))) (of class AST.IfElifElse)" type="scala.MatchError">scala.MatchError: IfElifElse(TrueConst(),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(1)))))),ElIfList(List()),NodeList(List(NodeList(List(Assignment(Variable(x),IntNum(0))))))) (of class AST.IfElifElse)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$167$$anonfun$apply$168.apply(Specs.scala:177)
	at parserSpec$$anonfun$2$$anonfun$apply$167$$anonfun$apply$168.apply(Specs.scala:177)
	at parserSpec$$anonfun$2$$anonfun$apply$167.apply(Specs.scala:177)
	at parserSpec$$anonfun$2$$anonfun$apply$167.apply(Specs.scala:167)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="Assignment(Variable(x),IfElseExpr(TrueConst(),Variable(y),Variable(z))) (of class AST.Assignment)" type="scala.MatchError">scala.MatchError: Assignment(Variable(x),IfElseExpr(TrueConst(),Variable(y),Variable(z))) (of class AST.Assignment)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:42)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$172$$anonfun$apply$173.apply(Specs.scala:183)
	at parserSpec$$anonfun$2$$anonfun$apply$172$$anonfun$apply$173.apply(Specs.scala:183)
	at parserSpec$$anonfun$2$$anonfun$apply$172.apply(Specs.scala:183)
	at parserSpec$$anonfun$2$$anonfun$apply$172.apply(Specs.scala:181)
</error>
                    </testcase><testcase classname="parserSpec" name="(It is not a test)" time="-0.001"> <error message="WhileInstr(FalseConst(),NodeList(List(NodeList(List(Assignment(Variable(x),BinExpr(+,Variable(x),IntNum(1)))))))) (of class AST.WhileInstr)" type="scala.MatchError">scala.MatchError: WhileInstr(FalseConst(),NodeList(List(NodeList(List(Assignment(Variable(x),BinExpr(+,Variable(x),IntNum(1)))))))) (of class AST.WhileInstr)
	at simplifier.Simplifier$.simplify(simplifier.scala:39)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$$anonfun$simplify$1.apply(simplifier.scala:28)
	at simplifier.Simplifier$.simplify(simplifier.scala:28)
	at parserSpec.parseString(Specs.scala:15)
	at parserSpec$$anonfun$2$$anonfun$apply$177$$anonfun$apply$178.apply(Specs.scala:193)
	at parserSpec$$anonfun$2$$anonfun$apply$177$$anonfun$apply$178.apply(Specs.scala:193)
	at parserSpec$$anonfun$2$$anonfun$apply$177.apply(Specs.scala:193)
	at parserSpec$$anonfun$2$$anonfun$apply$177.apply(Specs.scala:187)
</error>
                    </testcase>
                <system-out></system-out>
                <system-err></system-err>
                </testsuite>